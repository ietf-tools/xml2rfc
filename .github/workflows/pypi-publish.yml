name: Publish Python Package

on:
  workflow_dispatch:
    inputs:
      publish_release:
        description: 'Create Production Release'
        required: true
        type: boolean

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.semver.outputs.next }}

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Get Next Version
      if: ${{ inputs.publish_release }}
      id: semver
      uses: ietf-tools/semver-action@v1
      with:
        patchList: fix, bugfix, perf, refactor, test, tests, chore, revert
        token: ${{ github.token }}
        branch: main

    - name: Set Next Version Env Var
      if: ${{ inputs.publish_release }}
      env:
        NEXT_VERSION: ${{ steps.semver.outputs.next }}
      run: |
        echo "NEXT_VERSION=$next" >> $GITHUB_ENV

    - name: Create Draft Release
      uses: ncipollo/release-action@v1
      if: ${{ inputs.publish_release }}
      with:
        prerelease: true
        draft: false
        commit: ${{ github.sha }}
        tag: ${{ env.NEXT_VERSION }}
        name: ${{ env.NEXT_VERSION }}
        body: '*pending*'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Build Variables
      run: |
        if [[ $NEXT_VERSION ]]; then
          echo "Using AUTO SEMVER mode: $NEXT_VERSION"
          echo "PKG_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "PKG_VERSION_STRICT=${NEXT_VERSION#?}" >> $GITHUB_ENV
        elif [[ "$GITHUB_REF" =~ ^refs/tags/v* ]]; then
          echo "Using TAG mode: $GITHUB_REF_NAME"
          echo "PKG_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "PKG_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV
        else
          echo "Using TEST mode: v3.0.0-dev.$GITHUB_RUN_NUMBER"
          echo "PKG_VERSION=v3.0.0-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "PKG_VERSION_STRICT=3.0.0-dev.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        fi

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        setuptools
        --user

    - name: Build a binary wheel and a source tarball
      run: |
        echo "Using version $PKG_VERSION_STRICT"
        sed -i -r -e "s/^__version__ += '.*'$/__version__ = '$PKG_VERSION_STRICT'/" xml2rfc/__init__.py
        python3 -m build

    - name: Store the distribution packages and other artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: |
          dist/
          xml2rfc/
          .git/

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/xml2rfc
    permissions:
      id-token: write
    if: ${{ inputs.publish_release }}

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs:
    - build
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Download required artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: |
          dist/
          xml2rfc/
          .git/

    - name: Set Variables
      run: echo "PKG_VERSION=${{needs.build.outputs.pkg_version}}" >> $GITHUB_ENV

    - name: Update CHANGELOG
      id: changelog
      uses: Requarks/changelog-action@v1
      with:
        token: ${{ github.token }}
        tag: ${{ env.PKG_VERSION }}
        excludeTypes: ''

    - name: Commit CHANGELOG.md
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        branch: main
        commit_message: 'docs: update CHANGELOG.md + py file versions for ${{ env.PKG_VERSION }} [skip ci]'
        file_pattern: CHANGELOG.md xml2rfc/__init__.py
        commit_user_name: github-actions
        commit_user_email: github-actions@github.com

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: false
        tag: ${{ env.PKG_VERSION }}
        name: ${{ env.PKG_VERSION }}
        body: ${{ steps.changelog.outputs.changes }}
        artifacts: "dist/**"
        token: ${{ secrets.GITHUB_TOKEN }}
        makeLatest: true

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://test.pypi.org/p/xml2rfc
    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  build-base:
    runs-on: ubuntu-latest
    if: ${{ inputs.publish_release }}
    needs:
    - github-release
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker Build & Push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/base.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ghcr.io/ietf-tools/xml2rfc-base:latest
